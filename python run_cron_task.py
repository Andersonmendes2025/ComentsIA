import logging
from main import create_app # üëà Assume que sua fun√ß√£o de inicializa√ß√£o da app est√° em main.py
from google_auto import run_sync_for_user # üëà Importa a fun√ß√£o de sincroniza√ß√£o

# Importa os modelos (necess√°rio para consultas dentro do contexto)
from models import UserSettings # üëà Assumindo que UserSettings est√° em models.py

# 1. Configura√ß√µes b√°sicas (Opcional, mas √∫til para o log do Cron Job)
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

# 2. Inicializa a aplica√ß√£o Flask (sem iniciar o servidor)
app = create_app()

print("\n[CRON] ‚ö° Iniciando Cron Job do Render...")

# 3. For√ßa o Contexto da Aplica√ß√£o (RESOLVE O PROBLEMA DE 'CONTEXTO INCORRETO')
with app.app_context():
    try:
        # Consulta todos os usu√°rios com automa√ß√£o GBB ativada
        enabled_users = UserSettings.query.filter_by(gbp_auto_enabled=True).all()
        
        logging.info(f"[CRON] üïê Job di√°rio iniciado ‚Äî {len(enabled_users)} contas habilitadas.")
        
        total_geral = 0
        for s in enabled_users:
            logging.info(f"[CRON] ‚ñ∂Ô∏è Rodando sync para user_id={s.user_id}")
            
            # CHAMA A FUN√á√ÉO DE SINCRONIZA√á√ÉO DI√ÅRIA
            # Nota: run_sync_for_user sincroniza APENAS o dia atual (do 00:00 BRT)
            total_processadas = run_sync_for_user(s.user_id) 
            
            logging.info(f"[CRON] ‚úÖ {s.user_id}: {total_processadas} avalia√ß√µes processadas.")
            total_geral += total_processadas
            
        logging.info(f"[CRON] ‚úÖ Job di√°rio conclu√≠do com sucesso. Total: {total_geral}")

    except Exception:
        logging.exception("[CRON] üí• Job di√°rio falhou.")
        # Se falhar, o Render ir√° registrar a sa√≠da de erro (exit code != 0)