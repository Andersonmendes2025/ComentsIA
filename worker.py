import logging
import sys
from main import app
from google_auto import UserSettings, run_sync_last_48h

# Configura logs no Render
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def executar_fluxo():
    """Executa o fluxo de sincroniza√ß√£o do GBP para todos os usu√°rios ativos."""
    with app.app_context():
        try:
            enabled = UserSettings.query.filter_by(gbp_auto_enabled=True).all()
            if not enabled:
                logger.info("‚ö†Ô∏è Nenhum usu√°rio com automa√ß√£o ativa. Encerrando.")
                return

            total_global = 0
            logger.info(f"üöÄ Iniciando sincroniza√ß√£o GBP (√∫ltimas 48h) para {len(enabled)} usu√°rios...")

            for s in enabled:
                logger.info(f"‚ñ∂Ô∏è Executando sync para user_id={s.user_id}")
                total = run_sync_last_48h(s.user_id)
                total_global += total
                logger.info(f"‚úÖ {s.user_id}: {total} avalia√ß√µes processadas.")

            logger.info(f"üéØ Execu√ß√£o conclu√≠da. Total geral: {total_global} avalia√ß√µes processadas.")
        except Exception as e:
            logger.exception(f"üí• Erro durante execu√ß√£o do worker: {e}")

if __name__ == "__main__":
    modo = sys.argv[1] if len(sys.argv) > 1 else "auto"

    if modo == "auto":
        logger.info("üïê Rodando em modo autom√°tico (Render Cron Job di√°rio).")
        executar_fluxo()

    elif modo == "manual":
        logger.info("‚ö° Execu√ß√£o manual iniciada.")
        executar_fluxo()

    else:
        logger.warning(f"‚ùì Modo '{modo}' n√£o reconhecido. Use 'manual' ou 'auto'.")
