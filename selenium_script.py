import time
import requests
import chromedriver_autoinstaller
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By

def iniciar_bot_google(user_info=None):
    # Instala automaticamente o ChromeDriver
    chromedriver_autoinstaller.install()

    # Configura√ß√µes do navegador
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_experimental_option("detach", True)

    # Inicia o navegador
    driver = webdriver.Chrome(options=chrome_options)

    # Etapa 1 ‚Äì Acessa o Google Business
    driver.get("https://business.google.com/")
    print("üîë Aguarde o usu√°rio fazer login manualmente...")

    time.sleep(60)  # login manual

    # Etapa 2 ‚Äì Vai para aba de avalia√ß√µes
    try:
        driver.get("https://business.google.com/reviews")
        time.sleep(10)
    except Exception as e:
        print("‚ùå Erro ao acessar a aba de avalia√ß√µes:", e)
        return

    # Etapa 3 ‚Äì Captura e envia avalia√ß√µes
    try:
        reviews = driver.find_elements(By.CSS_SELECTOR, '[data-review-id]')
        print(f"üìã {len(reviews)} avalia√ß√µes encontradas.")

        for r in reviews:
            try:
                nome = r.find_element(By.CSS_SELECTOR, '.TSUbDb').text
                nota_element = r.find_element(By.CSS_SELECTOR, '[aria-label*="estrela"]')
                nota = nota_element.get_attribute("aria-label").split()[0]
                texto = r.find_element(By.CSS_SELECTOR, '.review-full-text, .Jtu6Td').text
                data = r.find_element(By.CSS_SELECTOR, '.dehysf').text

                print("\nüó£Ô∏è Avalia√ß√£o capturada:")
                print(f"üë§ Nome: {nome}")
                print(f"‚≠ê Nota: {nota}")
                print(f"üìÖ Data: {data}")
                print(f"üí¨ Texto: {texto}")

                # Envia para o backend Flask
                payload = {
                    'reviewer_name': nome,
                    'rating': int(nota),
                    'text': texto
                }

                try:
                    response = requests.post("http://localhost:8000/add_review", data=payload)
                    if response.status_code == 200:
                        print("‚úÖ Enviado com sucesso para o backend.")
                    else:
                        print(f"‚ö†Ô∏è Falha ao enviar: {response.status_code} - {response.text}")
                except Exception as req_err:
                    print("‚ùå Erro na requisi√ß√£o para o backend:", req_err)

            except Exception as err:
                print("‚ö†Ô∏è Erro ao extrair uma avalia√ß√£o:", err)

    except Exception as e:
        print("‚ùå Falha ao capturar avalia√ß√µes:", e)

    print("‚úÖ Fim da execu√ß√£o do rob√¥.")
    return driver
